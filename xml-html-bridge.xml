<article xmlns='http://docbook.org/ns/docbook'
         xmlns:xl='http://www.w3.org/1999/xlink'
         version='5.0' xml:lang='en'>
  <info>
    <title>XML and HTML Cross-Pollination: A Bridge Too Far?</title>
    <authorgroup>
      <author>
        <personname>Norman Walsh</personname>
        <email>norman.walsh@marklogic.com</email>
        <uri>http://nwalsh.com/</uri>
        <personblurb>
<para>Norman Walsh is a Lead Engineer at MarkLogic Corporation where
he works with the Application Services team. Norm is also an active
participant in a number of standards efforts worldwide: he is chair of
the XML Processing Model Working Group at the W3C where he is also
co-chair of the XML Core Working Group. At OASIS, he is chair of the
DocBook Technical Committee.</para>
        </personblurb>
        <affiliation>
          <jobtitle>Lead Engineer</jobtitle>
          <orgname>MarkLogic Corporation</orgname>
        </affiliation>
      </author>
      <author>
        <personname>Robin Berjon</personname>
        <email>robin@berjon.com</email>
        <uri>http://berjon.com/</uri>
        <personblurb>
          <para>
            Robin has spent the better part of this decade working on
            standards for a variety of Web and XML technologies,
            mostly within the W3C. He has served as author or editor
            for more than a dozen W3C standards, has chaired multiple
            groups working on XML optimisation and Web APIs, and has
            recently been elected to the TAG. He also hacks on
            Javascript stuff a lot. In his copious spare time he
            reads, writes, and gets bitten by his cat.
          </para>
        </personblurb>
        <affiliation>
          <jobtitle>Freelance consultant</jobtitle>
          <orgname>Robineko</orgname>
        </affiliation>
      </author>
    </authorgroup>
    <keywordset>
      <keyword>XML</keyword>
      <keyword>HTML</keyword>
      <keyword>W3C</keyword>
    </keywordset>

    <abstract>
      <para>
        W3C created a small Task Force to look at convergence paths
        between XML and HTML. One of the notions that it discussed was that
        the two technologies could perhaps not be aligned, but that they could
        cross-pollinate.
      </para>
      <para>
        This talk will look at ways for this to happen. Can we use CSS
        Selectors in XPointer? Can we build something like XSLT using
        CSS + JavaScript and another syntax? Does HTML actually have some interesting
        approaches to distributed extensibility? Should SVG be in the HTML namespace 
        and has it suffered from changing its syntax?
      </para>
    </abstract>
  </info>
  <section xml:id='intro'>
    <title>Introduction</title>
    <para>
      Over a year ago, the W3C put together a small XML-HTML Task Force that was asked to look
      into the convergence between these two technology families. This paper is derived from the
      experience of two of the task force's participants in looking at the two ecosystems in order
      to figure out what they could share.
    </para>
    <para>
      While it appears that complete alignment between the HTML and XML families may not be 
      achievable (or in fact desirable), there are nevertheless areas in which cross-pollination
      between those two stacks could help improve either or both. Despite the important design differences
      that exist between HTML and XML, their goals are not as divided as some of the stormier rhetoric 
      suggests. There are plenty of areas of common experience despite significant differences in the 
      details.
    </para>
    <para>
      This paper will therefore navigate a number of cross-over options. Some of these work today
      but may not be in common use, at times because they could in fact be detrimental, but in a number of
      cases possibly because they have been overlooked by those who could benefit from them. Other parts
      may not work because of a technological gap. Yet others may seem no less than utter madness, but 
      could nevertheless constitute an interesting avenue for exploration.
    </para>
  </section>
  <section xml:id='today'>
    <title>XML in Today's Browser</title>
    <para>
      XML is used on the Web only in moderation, but this does not prevent it from being available as a
      technology in browsers. In this section we look at what can be done with XML on the Web, what's missing
      and how that could be addressed, and at the overall worthiness of the notion.
    </para>

    <section xml:id='xml-css'>
      <title>XML, CSS, Javascript</title>
      <para>
        It is readily possible, using today's browsers, to simply ship XML + CSS on the Web. The style sheets
        that one will have to craft will be more complex than those often used for HTML since they will have
        to define the basic properties of every single element, but that does not constitute a major undertaking
        (unless the given language is huge, naturally).
      </para>
      <para>
        A good starting point for the above would be one of the many CSS reset style sheets that can be found
        at large. The goal of these is to reset the default styles that browsers apply (which differ) so as to start from a 
        common stylistic baseline. Adapting one of those to work for an XML vocabulary should prove
        straightforward. CSS can be applied to an XML document using an <code>xml-stylesheet</code> processing
        instruction.
      </para>

      <para>For example:</para>

      <programlisting><![CDATA[<?xml-stylesheet href="xmltest.css"?>
<doc>
<title>Title</title>
<para xml:id="test">Testing.</para>
</doc>]]></programlisting>

      <para>Where <filename>xmltest.css</filename> contains:</para>

<programlisting><![CDATA[doc {
    display: block;
}

title {
    display: block;
    font-size: 18pt;
    font-weight: bold;
}

para {
    display:block
    margin-before: 1em;
}]]></programlisting>

      <para>
        Inlined images are slightly trickier than the rest, but it is at least theoretically possible to address that issue with a combination
        of several <code>background</code> properties and the <code>attr()</code> function which can reuse the value of
        an attribute inside a CSS property. (Though this does not appear to be supported today.)
      </para>
      <para>
        Of course, once you've styled your document there isn't much that you can do with it beyond read it. In a number
        of cases that may be sufficient, but the interactivity that one has grown accustomed to on the Web will not be
        directly possible. For that, one needs support for forms and Javascript.
      </para>
      <para>
        XForms might spring to mind as a good option for the inclusion of forms in your XML document, but given that it
        is not natively supported in browsers a client-side Javascript implementation will be required to support it
        (or to implement form-like functionality based on another vocabulary), which brings us back to scripting.
      </para>
      <para>
        There is no equivalent to <code>xml-stylesheet</code> for scripting, but a <code>script</code> element in the
        XHTML namespace will do the trick:</para>

      <programlisting>&lt;?xml-stylesheet href="xmltest.css"?>
&lt;doc>
&lt;title>Title&lt;/title>
&lt;para xml:id="test">Testing.&lt;/para>

&lt;script xmlns="http://www.w3.org/1999/xhtml">
//&lt;![CDATA[
var text = document.createTextNode("Script testing");
var para = document.getElementsByTagName("para")[0];
para.removeChild(para.firstChild)
para.appendChild(text);
//]]&gt;&lt;/script>
&lt;/doc></programlisting>

<para>If using XML documents in this fashion were to become more widespread,
        the idea of am <code>xml-script</code> processing instruction might become interesting (it should not prove
        difficult to specify).
      </para>

      <para>
        Once this is set up, most of the moving parts ought to be functional. Since the DOM is properly live, just
        like any HTML DOM, modifications to the tree will have the effect on the rendering that you would expect.
        By and large, popular libraries like jQuery will (mostly) work. One thing worth noting though is that since
        the XML DOM has a number of difference with the HTML DOM (if only that the elements won't be properly specialised
        to a given interface), a number of tasks may prove more complex (and common libraries may stumble on some
        cases).
      </para>

<para>Support for <tag class="attribute">xml:id</tag> attributes in particular would make locating elements in
the XML DOM easier.</para>
    </section>
    <section xml:id='links'>
      <title>What, no links?</title>
      <para>
        One thing is missing from the above picture though: linking. XLink is not supported in any generally reusable
        manner (it is recognised on select SVG elements, but that's about it). Assuming Javascript and CSS, this can 
        be emulated. For a DocBook document for instance, we would have the following CSS:
      </para>
      <informalexample>
        <programlisting><![CDATA[@namespace "http://docbook.org/ns/docbook";
@namespace xl "http://www.w3.org/1999/xlink";
link[xl|href] {
    cursor: hand;
    color:  #00c;
    text-decoration: underline;
}]]></programlisting>
      </informalexample>
      <para>
        And navigation would work using Javascript (assuming jQuery and its xmlns plugin):
      </para>
      <informalexample>
        <programlisting><![CDATA[$.xmlns("http://docbook.org/ns/docbook");
$.xmlns("xl", "http://www.w3.org/1999/xlink");
$("article").on("click", "link[xl|link]", function () {
    document.location = $(this)[0].getAttributeNS("http://www.w3.org/1999/xlink", "href");
});]]></programlisting>
      </informalexample>
      <para>
        While this works, it is hardly the best for all link-based navigation to be handled in script.
        There have, in the past, been proposals that endeavoured to decorate documents in such a way that
        links would be recognised (for instance, using a style sheet that would identify link elements as
        such) but none ever gained much traction. If using XML on the Web were to be commonplace, this would
        likely be one of the first gaps that would require filling.
      </para>
    </section>
    <section xml:id='accessibility'>
      <title>The Accessibility of XML</title>

<para>Theoretically, accessibility of XML should be at least as good, perhaps better than HTML because
the opportunity exists for expressing richer semantics in the document. In practice, this is utterly
wrong. Had XML become widespread on the web, languages for mapping accessibility onto XML documents could
have been developed. Since it didn't, they weren't and the result is that HTML documents have much greater
accessibility because so much is known in advance about the semantics of the elements.</para>

<para>Perhaps ARIA and CSS would provide a framework for building some accessibility into XML on the web,
but it's not likely to be sufficient for the more complex cases.</para>

      <!-- 
        RB
        there isn't one
        semantics are needed
        aria and CSS are unlikely to be enough
      -->
    </section>
    <section xml:id='why'>
      <title>Why bother?</title>

<para>You probably shouldn't. If you subscribe to the many worlds
interpretation of quantum mechanics, you may be able to imagine worlds
where support for XML on the web is widespread and robust. In those
universes, deploying XML documents on the web, transforming, styling,
and scripting them is as easy and straightforward as deploying HTML
documents in our universe. But we don't live there.</para>

<para>In this universe, the benefits from deploying XML on the web are
probably limited to closed environments where it's convenient to think
of the documents that will be deployed on the web as being equally
useful for additional processing inside the environment. Extracting
linked data, performing entity enrichment, etc. using existing XML
technologies on top of the web documents may have real value.</para>

<para>But actual deployment is probably limited to XML documents that happen
to also be HTML documents or that generate the HTML DOM you expect when parsed
with an HTML parser.</para>

      <!-- 
        does it really work
        does it have genuine use cases
        if so, how do we address them?
        the winning approach might not be "XML on the Web" so much as "XML's ideas on the Web", or 
        "the stuff we can do easily with XML but not on the Web, on the Web"
      -->
    </section>
  </section>

  <section xml:id='born-xml'>
    <title>Born in XML, Live in HTML</title>

    <para>There are a great many technologies developed for XML that could (and do!) apply equally well
to HTML. If you move beyond the question of syntax to the level of an object model, an XML tree and
an HTML tree are even closer together than documents written in their respective syntaxes.
    </para>

    <para>It would be nice to be able to use them when they offer the easiest way forward.</para>

    <section xml:id='css-xpointer'>
      <title>XPointer and CSS</title>

      <para>XPointer and CSS both describe mechanisms for selecting regions of a document. In fact, XPointer is
really a framework for such mechanisms. An XPointer implementation that understood a “CSS scheme” would allow
authors to reuse expressions across styling and selection.</para>

<para>See, for example, <link xl:href="http://simonstl.com/articles/cssFragID.html">Using CSS
Selectors as Fragment Identifiers</link> by
<personname><firstname>Simon</firstname><surname>St.
Laurent</surname></personname>
<personname><firstname>Eric</firstname><surname>Meyer</surname></personname>.</para>

    </section>
    <section xml:id='fo'>
      <title>Can we replace FO?</title>
      <para>
        At least in some environments, CSS has made good progress in its support for print-related styles.
        Unfortunately, we don't yet seem to have reached the point where formats like PDF can fully be
        replaced on the Web.
      </para>
      <para>
        A good source of gaps in the current HTML+CSS ecosystem could therefore be FO. The pdf.js project
        has shown that it is possible to parse and render PDF using only Web technologies. The time therefore
        seems ripe to try to do the same thing with FO.
      </para>
      <para>
        Using such an approach it may be that we will be able to use FO directly in the browser, which at least
        could help solve PDF's many issues such as the difficulty in generating it easily, its various text-selection
        problems, and at least some of its more endemic accessibility problems (through judicious application of HTML
        and ARIA).
      </para>
      <para>
        More likely though it could highlight both some priorities in the evolution of CSS, and the value that there
        could be for implementers to support them in order to progressively phase out PDF.
      </para>
    </section>
    <section xml:id='compile-to-js'>
      <title>Compilation to JS</title>

<para>Another approach is simply to bring those tools directly into the browser. We've seen clear demonstrations
of substantial success in these areas in the work of
<link xl:href="http://saxonica.com/">Saxonica</link>’s on “Saxon Client Edition” and
<personname><firstname>Vojtěch</firstname><surname>Toman</surname></personname> on
<link xl:href="http://www.balisage.net/Proceedings/vol5/html/Toman01/BalisageVol5-Toman01.html">XML Pipeline Processing
in the Browser</link>.</para>
    </section>
    <section xml:id='svg'>
      <title>How SVG made the jump</title>
      <para>
        SVG was born and raised an XML language. It has its own namespace fully defined with a proper
        namespace document. It has a RelaxNG as well as an NVDL schema; in fact at one point or another
        it has even had a DTD and an XML Schema. It uses XLink, and version 1.2 even adopted <code>xml:id</code>.
        Over the years it has routinely been both consumed and produced using XSLT and XPath; for a while
        there even was a project to add <quote>SVG Extensions to XPath</quote> in order to process its geometry
        better.
      </para>
      <para>
        This is interesting because it is not all that common for graphics people to care, or even know much 
        about, XML. A large part of the reason for it to use XML in the first place was because it was intended
        to be embedded straight into XHTML, or of course any other XML language that could use some pretty
        shapes.
      </para>
      <para>
        But with XHTML pining for the fjords, the question of what to do with SVG became rather acute. Browsers
        already largely supported it, so that there was little point in dropping it entirely. Besides, there
        was no proposed replacement and starting from scratch would have taken too long. The decision was
        therefore made to find a way to integrate it with HTML.
      </para>
      <para>
        By and large, given that several of the important integration factors had already been figured out
        for XHTML integration and did not need to be updated, considering the size and complexity of SVG
        this turned out to be a lot easier than one may expect. However, the matter of syntax remained a problem.
        Keeping the XML syntax created trouble at the HTML parsing level since one would have to switch parsers.
        What's more, embedding different syntaxes that are mostly the same but also subtly different inside
        one another is hardly the friendly thing to do to developers. After some intense debate, the decision
        was made to accept the transition of SVG to the HTML syntax, along with other niceties like automatic
        namespacing.
      </para>
      <para>
        A number of participants in this discussion predicted trouble from this switch, notably due to cut and
        paste errors. In practice, now several years after the switch took place, very few complaints have been
        heard. On the contrary, the merged syntax has made it easier to better support SVG on the Web, and SVG
        is increasingly becoming mainstream thanks to that and the common usage of libraries that make use
        of this facility such as Raphaël. In fact it is such a success that the SVG WG is considering dropping
        SVG's own namespace entirely and automatically coercing it all into the HTML namespace, one way or another.
      </para>
      <para>
        An interesting open question here is whether there are other languages that could be given the same
        treatment.
      </para>
    </section>
    <section xml:id='web-components'>
      <title>Distributed Extensibility on the Web</title>
      <para>
        Much discussion has surrounded a property of “Distributed Extensibility” that XML is supposedly
        endowed with (by virtue of namespaces) when HTML is not. But is that concern justified?
      </para>
      <para>
        The first thing to note is that saying that XML supports distributed extensibility is not a very
        useful statement to make. XML is just a syntax, and if you couldn't freely create languages with
        it it's not clear what it would be useful for. A more precise characterisation is that, given
        that namespaces can be used to mix vocabularies, XML <emphasis>languages</emphasis> support distributed
        extensibility. Anyone can grab an XML document that uses a given language, slap an extra namespace
        declaration, and start injecting attributes and elements from a different language without hurting
        the first.
      </para>
      <para>
        The ability to extend a language independently of the agent that controls it is a very powerful and 
        seductive one. However, in order for it to be genuinely useful, you need more than extensibility at
        the syntactical and semantic level. You also need the same extensibility to be at the very least
        harmless through most of the processing chain that is applied to the original language.
      </para>
      <para>
        And that's where things start becoming less clear for distributed extensibility in the XML ecosystem.
        While building a processing tool chain that supports distributed extensibility in XML is technically
        possible, drove after drove of users have voted with their feet against it. In order to support DE,
        one would expect a schema language to accept by default namespaces that it is not aware of, yet the
        most popular choices in this area — XML Schema and RelaxNG — make this difficult. There is very little
        in the way of tooling support for manipulating trees that may compose multiple namespaces together
        while easily the ones that are not expected to be present. And in practice, code is rarely written
        with that expectation in mind. Try throwing in additional namespaced elements into a DOM, SAX, XSLT, etc. processing
        pipeline and the chances are high that you will see it fail.
      </para>
      <para>
        A number of best practices were initially worked on (in part in order to support versioning) that described
        useful rules for ignoring content from distributed extensibility, but there was never sufficient
        interest to finalise them. A technology like NVDL could prove helpful in a DE-enabled tool chain but
        it is hardly ever used — in fact the vast majority of XML users are likely never to have heard of it.
        RDDL (and namespace documents in general) which could make DE additionally useful by building discoverability
        into the system barely elicited sufficient interest to foster a few short-lived proposals.
      </para>
      <para>
        It is therefore fair to say that while distributed extensibility was part of the initial XML vision, in practice
        it failed to see the light of day.
      </para>
      <para>
        Meanwhile, work has progressed on a promising new HTML-based technology called
        <link xl:href='http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html'>Web Components</link>.
        Geared towards interactive documents, it makes it possible to decorate an existing document with
        any number of “shadow DOMs” that can hang off its elements, and can themselves contain further shadow DOMs
        recursively. The current work is still in its infancy, but it has roots in previous work called XBL which
        served a similar purpose in a different fashion.
      </para>
      <para>
        The great value of shadow DOMs is that they make it possible to process independent yet composed document trees
        without any risk of seeing their processing chains step on one another's toes. It is too early to know if they
        could be transposed to batch operations easily or if that approach would even be workable in an XML context,
        but it's a space worth watching. It might just happen that the XML ecosystem could import concepts from
        Web Components in order to develop its own support for distributed extensibility.
      </para>
    </section>
    <section xml:id='web-xslt'>
      <title>Web Transformations</title>
      <para>
        The Javascript community is presently seeing a small cottage industry in the production of templating 
        languages. In fact, there are days on which one may get the impression that you can't be a proper
        Javascript developer if you haven't released your own templating language to GitHub.
      </para>
      <para>
        String-interpolation templating languages are great when you need to generate HTML from a rather straightforward
        data structure, but they start to become cumbersome when your input increases in complexity, especially if
        it's a document itself.
      </para>
      <para>
        For that, XSLT is currently king. But try as you might, getting your typical web hacker to even think about
        perhaps using it is nigh impossible. Back in 1998, a submission called 
        <link xl:href='http://www.w3.org/TR/NOTE-STTS3'>STTS</link> was made to the W3C. It used a CSS based declarative
        language to transform documents (primarily HTML back then), but never met with strong support. Re-evaluating it
        in today's context, it is interesting to note that it bears some similarities with the now popular 
        <link xl:href='http://haml-lang.com/'>HAML</link> templating language. That being said, its highly declarative
        nature is likely to make it only slightly more popular than XSLT with this crowd.
      </para>
      <para>
        Would it be possible to implement a language or library built on the principles that make XSLT a great language
        but using an approach that would be familiar to Web developers? Reimplementing the full feature-set of an
        XSLT processor is not a minor undertaking, but a decent amount of it can be handled if we have JavaScript
        handy. Besides, since this is just a thought experiment at this point, we can probably stick to only porting
        XSLT's core processing model and see how far that gets us. That is a much smaller endeavour, in fact the
        XSLT processing model is so elegantly short that we can simply reproduce it here from the specification in
        its unabridged entirety:
      </para>
      <blockquote>
        <attribution>XSLT 1.0, James Clark</attribution>
        <para>
          A list of source nodes is processed to create a result tree fragment. The result tree is constructed by 
          processing a list containing just the root node. A list of source nodes is processed by appending the 
          result tree structure created by processing each of the members of the list in order. A node is processed 
          by finding all the template rules with patterns that match the node, and choosing the best amongst them; 
          the chosen rule's template is then instantiated with the node as the current node and with the list of 
          source nodes as the current node list. A template typically contains instructions that select an additional 
          list of source nodes for processing. The process of matching, instantiation and selection is continued 
          recursively until no new source nodes are selected for processing.
        </para>
        <para>
          Implementations are free to process the source document in any way that produces the same result as if it 
          were processed using this processing model.
        </para>
      </blockquote>
      <para>
        That doesn't solve all of our problems of course, but it's a start. Based on this we could imagine some form
        of JSLT code that might look like the following if we wanted to transform a simple DocBook document to 
        HTML.
      </para>
      <informalexample>
        <programlisting><![CDATA[var sheet = require("jaspilite").sheet()
,   $     = require("jquery")
,   XL    = "http://www.w3.org/1999/xlink"
;
sheet.xmlns({
    "":   "http://docbook.org/ns/docbook"
,   "xl": XL
});
sheet.template(":root > article", function () {
    var title = $(this).find("info > title").text();
    return $("<html><head><title></title></head><body><h1></h1><content/></body></html>")
              .find("title").text(title).end()
              .find("h1").text(title).end()
              .find("content").replaceWith($(this).apply());
});
sheet.template("info", function () {});
sheet.template("section", function () {
    return $(this).apply().wrapIn("<section></section>");
});
sheet.template("title", function () {
    var depth = $(this).parents("section").length;
    if (depth < 1) return;
    depth++;
    if (depth > 6) depth = 6;
    return $(this).apply().wrapIn(sheet.createElement("h" + depth));
});
sheet.template("para", function () {
    return $(this).apply().wrapIn("<p></p>");
});
sheet.template("emphasis", function () {
    return $(this).apply().wrapIn("<em></em>");
});
sheet.template("link[xl|href]", function () {
    var $link = $(this);
    return $link.apply().wrapIn("<a></a>").attr("href", $link[0].getAttributeNS(XL, "href"));
});
var $out = sheet.run("my-document.dkb");
console.log($out.html());]]></programlisting>
      </informalexample>
      <para>
        There are naturally some issues with the above code, but as a transformation sheet it is usable
        and ought to seem roughly familiar to JS developers in large part thanks to its reliance on jQuery.
        The first problem is namespaces: jQuery (and its underlying CSS engine, Sizzle) is not natively
        aware of namespaces. This can be worked around using a plugin, but it still shows when one tries
        to access a namespaced attribute. That being said, one thing that may not be readily obvious
        when used to XPath is that all of the CSS Selectors above use the DocBook namespace properly since
        unlike XPath CSS Selectors can have a default declaration applied to them.
      </para>
      <para>
        Another issue is with injecting variables and finding a substitute for <code>apply-templates</code>
        in the output tree. As can be seen in the first template, the way in which that is done is by first
        creating the output structure, and then addressing some of its part to inject a value or replace
        a dummy element. That may seem cumbersome, but jQuery makes it mercifully short. What's more, as
        can be seen in the other templates, all that's needed if one wishes to merely wrap the 
        <code>apply-templates</code> in an element is to use the <code>wrapIn()</code> method which will
        simply do the right thing.
      </para>
      <para>
        Finally, the most likely limitation with this approach has to do with just how limited CSS Selectors
        are. For a trivial example they'll shine, but try so much as to find a text node and you'll hit a
        wall. This could be fixed either by inventing new selectors (which is not necessarily difficult
        since jQuery is very extensible in this area) or by making it possible to use XPath in the same
        context. The latter might be a workable option as a more power alternative that one can reach for
        when needed.
      </para>
      <para>
        Of course this is just a thought experiment and it is likely to have many more failings. There is no
        doubt that the crafty minds of XSLT experts will be able to find many an XSLT construct that could be
        difficult to reproduce here. That said, crazier ideas have become popular.
      </para>
    </section>
    <section xml:id='css-schema'>
      <title>CSS Schema</title>
      <para>
        The XML ecosystem is big on validation, so big in fact that drinking games involving reciting long lists
        of validation technologies had to be banned after too many xml-dev subscribers were found suffering of
        delirium tremens.
      </para>
      <para>
        On the HTML side however, there is not that much to be found. There are, naturally, a number of HTML
        validators out there, but they tend not to be easily extensible for the sort of context-specific
        rules that one may wish to overlay on HTML. JSON Schema is being worked on, but it applies only to JSON
        documents.
      </para>
      <para>
        Naturally, a lot of the XML validation toolkit can be applied to HTML documents with some relatively
        manageable amount of shoe-horning. But most of it at best uses moving parts that are unfamiliar to most
        Web developers, and at worst is used as the boogeyman with which young web hackers are kept in check.
      </para>
      <para>
        In the spirit of reusing good ideas across the cultural gap, one schema language that lends itself well
        both to the common validation problems in an HTML context (which are mostly validation overlaid atop
        HTML itself) and to concepts that can be translated with some degree of ease is Schematron.
      </para>
      <para>
        Taking the basic notions of rules and assertions, we could imagine (again, as a thought experiment)
        a CSS Schema language that could look like the following:
      </para>
      <informalexample>
        <programlisting><![CDATA[@rule head {
    title {
        assert:  "Page does not have a title.";
    }
    link[rel="stylesheet"][type="text/css"][href="std.css"] {
        assert:  "Page does not use the standard stylesheet.";
    }
    style {
        report:  "Page uses inline style rather than linking.";
    }
}
@rule body {
    :scope.std-body {
        assert:   "Page does not use the standard body class.";
    }
    :scope > div.std-top {
        assert:   "Page does not start with the required page top component.";
    }
}]]></programlisting>
      </informalexample>
      <para>
        The above is syntactically valid CSS that merely adds an <code>@rule</code> block and new properties
        called <code>assert</code> and <code>report</code> that all correspond to the same constructs in Schematron.
        Selectors are used in the same manner that XPath is. Of note is the <code>:scope</code> selector which
        can be used to select the current scope, matching the default context that XPath can use.
      </para>
      <para>
        This can be used equally well offline or in a browser. One addition that could be interesting would be 
        simply to specify regular style properties (e.g. <code>background: red;</code>) to the assertions so
        that when running in the browser the failure of an assertion would cause the style to be applied, making
        for nice visual feedback.
      </para>
      <para>
        And since CSS can be applied interactively, this could notably be used in order to provide visual feedback
        inside browser-based document-editing systems.
      </para>
    </section>
  </section>

  <section xml:id='conclusion'>
    <title>Conclusion</title>

<para>Characterizing the relationship between the XML and HTML communities is largely a matter of perspective.
At a high enough level, everyone is using technologies of one sort or another to manipulate trees in various ways.
From this distance, there's almost no means to distinguish them. At the very closest level, there are persistent
and irksome disagreements over the nature of error handling, mechanisms for distributed extensibility, even the
virtue (or lack thereof) of extensible vocabularies. From this distance, the common ground is hard to see.</para>

<para>Surely, the reality is somewhere in between and there are opportunities to learn, share, harmonize, and
diverge and join, for everyone.</para>
  </section>
</article>
