
<article xmlns='http://docbook.org/ns/docbook'
	       xmlns:xl='http://www.w3.org/1999/xlink'
	       version='5.0' xml:lang='en'>
  <info>
    <title>XML and HTML Cross-Pollination: A Bridge Too Far?</title>
    <!-- <authorlist> -->
      <author>
        <personname>Norm Walsh</personname>
        <email>ndw@nwalsh.com</email>
        <uri>http://norman.walsh.name/</uri>
        <personblurb>
          <para>
            A very cool guy.
          </para>
        </personblurb>
        <affiliation>
          <jobtitle>Rock Star</jobtitle>
          <orgname>MarkLogic</orgname>
        </affiliation>
      </author>
      <author>
        <personname>Robin Berjon</personname>
        <email>robin@berjon.com</email>
        <uri>http://berjon.com/</uri>
        <personblurb>
          <para>
            Robin has spent the better part of this decade working on standards for a variety of Web
            and XML technologies, mostly within the W3C. He has served as author or editor for more 
            than a dozen W3C standards, has chaired multiple groups working on XML optimisation and 
            Web APIs, and has recently been elected to the TAG. He also hacks on Javascript stuff
            a lot. In his copious spare time he reads, writes, and gets bitten by his cat.
          </para>
        </personblurb>
        <affiliation>
          <jobtitle>Freelance consultant</jobtitle>
          <orgname>Robineko</orgname>
        </affiliation>
      </author>
    <!-- </authorlist> -->
    <keywordset>
      <keyword>XML</keyword>
      <keyword>HTML</keyword>
      <keyword>W3C</keyword>
    </keywordset>

    <abstract>
      <para>
        W3C created a small Task Force to look at convergence paths
        between XML and HTML. One of the notions that it discussed was that
        the two technologies could perhaps not be aligned, but that they could
        cross-pollinate.
      </para>
      <para>
        This talk will look at ways for this to happen. Can we use CSS
        Selectors in XPointer? Can we build something like XSLT using
        CSS + JavaScript and another syntax? Does HTML actually have some interesting
        approaches to distributed extensibility? Should SVG be in the HTML namespace 
        and has it suffered from changing its syntax?
      </para>
    </abstract>
  </info>

  <section xml:id='intro'>
    <title>Introduction</title>
    <para>
      Over a year ago, the W3C put together a small XML-HTML Task Force that was asked to look
      into the convergence between these two technology families. This paper is derived from the
      experience of two of the task force's participants in looking at the two ecosystems in order
      to figure out what they could share.
    </para>
    <para>
      While it appears that complete alignment between the HTML and XML families may not be 
      achievable (or in fact desirable), there are nevertheless areas in which cross-pollination
      between those two stacks could help improve either or both. Despite the important design differences
      that exist between HTML and XML, their goals are not as divided as some of the stormier rhetoric 
      suggests. There are plenty of areas of common experience despite significant differences in the 
      details.
    </para>
    <para>
      This paper will therefore navigate a number of cross-over options. Some of these work today
      but may not be in common use, at times because they could in fact be detrimental, but in a number of
      cases possibly because they have been overlooked by those who could benefit from them. Other parts
      may not work because of a technological gap. Yet others may seem no less than utter madness, but 
      could nevertheless constitute an interesting avenue for exploration.
    </para>
  </section>

  <section xml:id='today'>
    <title>XML in Today's Browser</title>
    <para>
      XXX
    </para>

    <section xml:id='xml-css'>
      <title>XML + CSS</title>

      <para>
        XXX
      </para>
      <!-- 
       (which mostly works, I think)
      -->
    </section>
    <section xml:id='xml-js'>
      <title>XML + CSS + JS</title>

      <para>
        XXX
      </para>
      <!-- 
       (which mostly doesn't, I think)
      * <?xml-script?>
      * XForms. Is it worth it?
      -->
    </section>
    <section xml:id='links'>
      <title>What, no links?</title>

      <para>
        XXX
      </para>
      <!-- 
        XLink unsupported
      -->
    </section>
    <section xml:id='accessibility'>
      <title>The Accessibility of XML</title>

      <para>
        XXX
      </para>
      <!-- 
        RB
        there isn't one
        semantics are needed
        aria and CSS are unlikely to be enough
      -->
    </section>
    <section xml:id='why'>
      <title>Why bother?</title>

      <para>
        XXX
      </para>
      <!-- 
        does it really work
        does it have genuine use cases
        if so, how do we address them?
      -->
    </section>
  </section>

  <section xml:id='born-xml'>
    <title>Born in XML, Live in HTML</title>
    <para>
      XXX
    </para>

    <section xml:id='css-xpointer'>
      <title>XPointer and CSS</title>

      <para>
        XXX
      </para>
      <!-- 
      A CSS selector-based XPointer scheme (Simon)
      -->
    </section>
    <section xml:id='fo'>
      <title>Can we replace FO?</title>

      <para>
        XXX
      </para>
      <!-- 
      What's missing from CSS to do FO? Does it need JS?
      -->
    </section>
    <section xml:id='compile-to-js'>
      <title>Compilation to JS</title>

      <para>
        XXX
      </para>
      <!-- 
      NDW
      Compilation to JavaScript (Saxon CE, Vojtech's XProc GWT project)
      -->
    </section>
    <section xml:id='svg'>
      <title>How SVG made the jump</title>

      <para>
        XXX
      </para>
      <!-- 
      RB
      Has it suffered from changing its syntax?
      Should SVG be in the HTML namespace as is now being investigated?
      -->
    </section>
    <section xml:id='web-components'>
      <title>Distributed Extensibility on the Web</title>
      <para>
        Much discussion has surrounded a property of “Distributed Extensibility” that XML is supposedly
        endowed with (by virtue of namespaces) when HTML is not. But is that concern justified?
      </para>
      <para>
        The first thing to note is that saying that XML supports distributed extensibility is not a very
        useful statement to make. XML is just a syntax, and if you couldn't freely create languages with
        it it's not clear what it would be useful for. A more precise characterisation is that, given
        that namespaces can be used to mix vocabularies, XML <emphasis>languages</emphasis> support distributed
        extensibility. Anyone can grab an XML document that uses a given language, slap an extra namespace
        declaration, and start injecting attributes and elements from a different language without hurting
        the first.
      </para>
      <para>
        The ability to extend a language independently of the agent that controls it is a very powerful and 
        seductive one. However, in order for it to be genuinely useful, you need more than extensibility at
        the syntactical and semantic level. You also need the same extensibility to be at the very least
        harmless through most of the processing chain that is applied to the original language.
      </para>
      <para>
        And that's where things start becoming less clear for distributed extensibility in the XML ecosystem.
        While building a processing tool chain that supports distributed extensibility in XML is technically
        possible, drove after drove of users have voted with their feet against it. In order to support DE,
        one would expect a schema language to accept by default namespaces that it is not aware of, yet the
        most popular choices in this area — XML Schema and RelaxNG — make this difficult. There is very little
        in the way of tooling support for manipulating trees that may compose multiple namespaces together
        while easily the ones that are not expected to be present. And in practice, code is rarely written
        with that expectation in mind. Try throwing in additional namespaced elements into a DOM, SAX, XSLT, etc. processing
        pipeline and the chances are high that you will see it fail.
      </para>
      <para>
        A number of best practices were initially worked on (in part in order to support versioning) that described
        useful rules for ignoring content from distributed extensibility, but there was never sufficient
        interest to finalise them. A technology like NVDL could prove helpful in a DE-enabled tool chain but
        it is hardly ever used — in fact the vast majority of XML users are likely never to have heard of it.
        RDDL (and namespace documents in general) which could make DE additionally useful by building discoverability
        into the system barely elicited sufficient interest to foster a few short-lived proposals.
      </para>
      <para>
        It is therefore fair to say that while distributed extensibility was part of the initial XML vision, in practice
        it failed to see the light of day.
      </para>
      <para>
        Meanwhile, work has progressed on a promising new HTML-based technology called
        <link xl:href='http://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html'>Web Components</link>.
        Geared towards interactive documents, it makes it possible to decorate an existing document with
        any number of “shadow DOMs” that can hang off its elements, and can themselves contain further shadow DOMs
        recursively. The current work is still in its infancy, but it has roots in previous work called XBL which
        served a similar purpose in a different fashion.
      </para>
      <para>
        The great value of shadow DOMs is that they make it possible to process independent yet composed document trees
        without any risk of seeing their processing chains step on one another's toes. It is too early to know if they
        could be transposed to batch operations easily or if that approach would even be workable in an XML context,
        but it's a space worth watching. It might just happen that the XML ecosystem could import concepts from
        Web Components in order to develop its own support for distributed extensibility.
      </para>
    </section>
    <section xml:id='web-xslt'>
      <title>Web Transformations</title>
      <para>
        The Javascript community is presently seeing a small cottage industry in the production of templating 
        languages. In fact, there are days on which one may get the impression that you can't be a proper
        Javascript developer if you haven't released your own templating language to GitHub.
      </para>
      <para>
        String-interpolation templating languages are great when you need to generate HTML from a rather straightforward
        data structure, but they start to become cumbersome when your input increases in complexity, especially if
        it's a document itself.
      </para>
      <para>
        For that, XSLT is currently king. But try as you might, getting your typical web hacker to even think about
        perhaps using it is nigh impossible. Back in 1998, a submission called 
        <link xl:href='http://www.w3.org/TR/NOTE-STTS3'>STTS</link> was made to the W3C. It used a CSS based declarative
        language to transform documents (primarily HTML back then), but never met with strong support. Re-evaluating it
        in today's context, it is interesting to note that it bears some similarities with the now popular 
        <link xl:href='http://haml-lang.com/'>HAML</link> templating language. That being said, its highly declarative
        nature is likely to make it only slightly more popular than XSLT with this crowd.
      </para>
      <para>
        Would it be possible to implement a language or library built on the principles that make XSLT a great language
        but using an approach that would be familiar to Web developers? 
      </para>
      Jaspilite
      <informalexample>
        <programlisting>
        </programlisting>
      </informalexample>
      <!-- 
      RB
      STTS
      Can we build an XSLT-alike using CSS+JavaScript syntax?
      -->
    </section>
    <section xml:id='css-schema'>
      <title>CSS Schema</title>

      <para>
        XXX
      </para>
      <!-- 
      RB
      CSS Schema
      Schematron
      -->
    </section>
  </section>

  <section xml:id='conclusion'>
    <title>Conclusion</title>

    <para>
      XXX
    </para>
    <!-- 
    nothing is too crazy
    -->
  </section>
</article>
